CM import numpy as np
CM import matplotlib.pyplot as plt
CM 
CM 
CM SIZES = [16, 64]
CM 
CM 
CM class AXData:
CM     def __init__(self, size, plot=True):
CM         self.size = size
CM         self.plot = plot
CM 
CM     @staticmethod
CM     def primfacs(p):
CM         i = 2
CM         primfac = []
CM         while i * i <= p:
CM             while p % i == 0:
CM                 primfac.append(i)
CM                 p = p / i
CM             i = i + 1
CM         if p > 1:
CM             primfac.append(round(p))
CM         return primfac
CM 
CM     def run(self):
CM         data = [[0, 0, 0], [1, 1, 1]]
CM         for n in range(2, self.size):
CM             factor = self.primfacs(n)
CM             if len(factor) in [1, 2, 3]:
CM                 tail = [1] * (3 - len(factor))
CM                 data.append(tail + factor)
CM         print(f"AX{self.size}")
CM         for x, y, z in data:
CM             print(f"[{x}, {y}, {z}]")
CM         print(f"SIZE={self.size}, len(data)={len(data)}")
CM         if self.plot:
CM             data = np.asarray(data)
CM             fig = plt.figure(figsize=(12, 12))
CM             ax = fig.add_subplot(projection='3d')
CM             ax.plot(data[:, 0], data[:, 1], data[:, 2])
CM             plt.show()
CM 
CM 
CM def main():
CM     for size in SIZES:
CM         ax = AXData(size=size)
CM         ax.run()
CM 
CM 
CM if __name__ == "__main__":
CM     main()
CM 
CE
SY S=1/20
SY R=0.0001
GW	1	9	0*S	0*S	0*S	1*S	1*S	0*S	R
GW	2	9	1*S	1*S	0*S	2*S	2*S	0*S	R
GW	3	9	2*S	2*S	0*S	1*S	3*S	0*S	R
GW	4	9	1*S	3*S	0*S	1*S	1*S	0*S	R
GW	5	9	1*S	3*S	0*S	0*S	0*S	0*S	R
GE	0
GN	-1
EK
EX	0	1	9	0	1	0	0	'Voltage source (1+j0) at wire 1 segment 9.
FR	0	0	0	0	1420	0
EN
